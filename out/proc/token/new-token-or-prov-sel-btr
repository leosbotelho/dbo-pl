create or replace procedure New_Token_or_Prov_Sel_btr (
  p_Db        tinyint,
  p_ProvHash  bigint unsigned,
  $Pid        bigint
)
begin

-- Boilerplate

declare err boolean default false;
declare cont boolean default false;
declare gobble boolean default false;
declare sqlStates varchar(512) default '';
declare sqlCodes varchar(512) default '';
declare msgTxts varchar(512) default '';
declare lastSqlCode smallint default 0;
declare lastMsgTxt varchar(512) default '';

declare continue handler for SQLWarning
begin
  if not gobble then
    get diagnostics @errCount = number;
    set @i = 1;
    while @i <= @errCount do
      get diagnostics condition @i
        @sqlState = returned_sqlstate, @sqlCode = mysql_errno, @msgTxt = message_text;
      set @errstr = concat('New_Token_or_Prov_Sel_btr ', @sqlState, ' ', @sqlCode, ' ', @msgTxt);
      select @sqlState as `SqlState`, @sqlCode as `SqlCode`, @errstr as Warn;
      set @i = @i + 1;
    end while;
  end if;
end;

declare continue handler for SQLException, 1265
begin
  set err = true;
  if not gobble then
    if cont then
      get diagnostics @errCount = number;
      if @errCount >= 1 then
        get diagnostics condition 1
          @sqlState = returned_sqlstate, @sqlCode = mysql_errno, @msgTxt_ = message_text;
        set @msgTxt = concat(@sqlState, ' ', @sqlCode, ' ', @msgTxt_);
        set sqlStates = case when sqlStates = ''
          then @sqlState else concat(sqlStates, ', ', @sqlState) end;
        set sqlCodes = case when sqlCodes = ''
          then @sqlCode else concat(sqlCodes, ', ', @sqlCode) end;
        set msgTxts = case when msgTxts = ''
          then @msgTxt else concat(msgTxts, '\n', @msgTxt) end;
        set @i = 2;
        while @i <= @errCount do
          get diagnostics condition @i
            @sqlState = returned_sqlstate, @sqlCode = mysql_errno, @msgTxt_ = message_text;
          set @msgTxt = concat(@sqlState, ' ', @sqlCode, ' ', @msgTxt_);
          set sqlStates = concat(sqlStates, ', ', @sqlState);
          set sqlCodes = concat(sqlCodes, ', ', @sqlCode);
          set msgTxts = concat(msgTxts, '\n', @msgTxt);
          set @i = @i + 1;
        end while;
      end if;
    else
      get diagnostics condition 1
        @sqlState_ = returned_sqlstate, @sqlCode_ = mysql_errno, @msgTxt = message_text;
      get diagnostics @errCount = number;
      if @errCount >= 2 then
        get diagnostics condition 2
          @sqlState = returned_sqlstate, @sqlCode = mysql_errno, @msgTxt_ = message_text;
        set @msgTxt = concat(@sqlState, ' ', @sqlCode, ' ', @msgTxt_);
        set sqlStates = case when sqlStates = ''
          then @sqlState else concat(sqlStates, ', ', @sqlState) end;
        set sqlCodes = case when sqlCodes = ''
          then @sqlCode else concat(sqlCodes, ', ', @sqlCode) end;
        set msgTxts = case when msgTxts = ''
          then @msgTxt else concat(msgTxts, '\n', @msgTxt) end;
        set @i = 3;
        while @i <= @errCount do
          get diagnostics condition @i
            @sqlState = returned_sqlstate, @sqlCode = mysql_errno, @msgTxt_ = message_text;
          set @msgTxt = concat(@sqlState, ' ', @sqlCode, ' ', @msgTxt_);
          set sqlStates = concat(sqlStates, ', ', @sqlState);
          set sqlCodes = concat(sqlCodes, ', ', @sqlCode);
          set msgTxts = concat(msgTxts, '\n', @msgTxt);
          set @i = @i + 1;
        end while;
      end if;
      if sqlStates <> '' then
        set @sqlState = concat('sqlstate: ', sqlStates);
        set @sqlCode = concat('sqlcode: ', sqlCodes);
        set @errstr = concat(@msgTxt, ' (', @sqlState, '; ', @sqlCode, ')', '\n\n', msgTxts);
      else
        set @errstr = @msgTxt;
      end if;
      set @errstr = concat('New_Token_or_Prov_Sel_btr ', @sqlState_, ' ', @sqlCode_, ' ', @errstr);
      if @@in_transaction then
        rollback;
      end if;
      resignal set message_text = @errstr;
    end if;
  end if;
end;

XXX: repeat

set cont = true;

if @@in_transaction then
  set lastSqlCode = 20002;
  set lastMsgTxt = 'Cannot run inside an already opened tran';
  leave XXX;
end if;

set @param1Count = (
  select count(*) from Par_DbToken_Hash where $Id = $Pid);

if err then
  set lastSqlCode = 10000;
  set lastMsgTxt = 'Select param1Count failed';
  leave XXX;
end if;

if @param1Count < 1 then
  set lastSqlCode = 20003;
  set lastMsgTxt = 'Empty Par_DbToken_Hash';
  leave XXX;
end if;

-- Execute

set transaction isolation level Serializable;

start transaction read only;

if p_Db & 1 then
  
  select Hash
  from Par_DbToken_Hash P1
  where P1.$Id = $Pid
    and P1.Bbr = 0
    and not exists (
      select 1
      from BB.TokenProv Tp
      where Tp.TokenHash = P1.Hash
    )
  ;

  if err then
    set lastSqlCode = 10001;
    set lastMsgTxt = 'Select BB.Token failed';
    leave XXX;
  end if;

  select Hash
  from Par_DbToken_Hash P1
  where $Id = $Pid
    and P1.Bbr = 0
    and exists (
      select 1
      from BB.TokenProv Tp
      where Tp.TokenHash = P1.Hash
    )
    and not exists (
      select 1
      from BB.TokenProv Tp
      where Tp.TokenHash = P1.Hash
        and Tp.ProvHash = p_ProvHash
    )
  ;

  if err then
    set lastSqlCode = 10002;
    set lastMsgTxt = 'Select BB.Prov failed';
    leave XXX;
  end if;

end if;

if p_Db & 2 then
  
  select Hash
  from Par_DbToken_Hash P1
  where P1.$Id = $Pid
    and P1.Bbr = 1
    and not exists (
      select 1
      from BBR.TokenProv Tp
      where Tp.TokenHash = P1.Hash
    )
  ;

  if err then
    set lastSqlCode = 10003;
    set lastMsgTxt = 'Select BBR.Token failed';
    leave XXX;
  end if;

  select Hash
  from Par_DbToken_Hash P1
  where $Id = $Pid
    and P1.Bbr = 1
    and exists (
      select 1
      from BBR.TokenProv Tp
      where Tp.TokenHash = P1.Hash
    )
    and not exists (
      select 1
      from BBR.TokenProv Tp
      where Tp.TokenHash = P1.Hash
        and Tp.ProvHash = p_ProvHash
    )
  ;

  if err then
    set lastSqlCode = 10004;
    set lastMsgTxt = 'Select BBR.Prov failed';
    leave XXX;
  end if;

end if;

until 1 end repeat;

set cont = false;
if @@in_transaction then
  if lastSqlCode = 0 then
    commit;
  else
    rollback;
  end if;
end if;

set gobble = true;

set err = false;
delete from Par_DbToken_Hash where $Id = $Pid;
if not err then
  delete from Param where $Id = $Pid and ParamName = 'Par_DbToken_Hash';
end if;

set err = false;
set gobble = false;

set cont = false;
if lastSqlCode <> 0 then
  signal sqlstate '45100'
    set mysql_errno = lastSqlCode, message_text = lastMsgTxt;
end if;

end;