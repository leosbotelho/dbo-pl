create or replace procedure Token_Add_btr (
  p_Db         tinyint,
  p_ProvHash   bigint unsigned,
  $Pid         bigint
)
begin

-- Boilerplate

declare err boolean default false;
declare cont boolean default false;
declare gobble boolean default false;
declare sqlStates varchar(512) default '';
declare sqlCodes varchar(512) default '';
declare msgTxts varchar(512) default '';
declare lastSqlCode smallint default 0;
declare lastMsgTxt varchar(512) default '';

declare continue handler for SQLWarning
begin
  if not gobble then
    get diagnostics @errCount = number;
    set @i = 1;
    while @i <= @errCount do
      get diagnostics condition @i
        @sqlState = returned_sqlstate, @sqlCode = mysql_errno, @msgTxt = message_text;
      set @errstr = concat('Token_Add_btr ', @sqlState, ' ', @sqlCode, ' ', @msgTxt);
      select @sqlState as `SqlState`, @sqlCode as `SqlCode`, @errstr as Warn;
      set @i = @i + 1;
    end while;
  end if;
end;

declare continue handler for SQLException, 1265
begin
  set err = true;
  if not gobble then
    if cont then
      get diagnostics @errCount = number;
      if @errCount >= 1 then
        get diagnostics condition 1
          @sqlState = returned_sqlstate, @sqlCode = mysql_errno, @msgTxt_ = message_text;
        set @msgTxt = concat(@sqlState, ' ', @sqlCode, ' ', @msgTxt_);
        set sqlStates = case when sqlStates = ''
          then @sqlState else concat(sqlStates, ', ', @sqlState) end;
        set sqlCodes = case when sqlCodes = ''
          then @sqlCode else concat(sqlCodes, ', ', @sqlCode) end;
        set msgTxts = case when msgTxts = ''
          then @msgTxt else concat(msgTxts, '\n', @msgTxt) end;
        set @i = 2;
        while @i <= @errCount do
          get diagnostics condition @i
            @sqlState = returned_sqlstate, @sqlCode = mysql_errno, @msgTxt_ = message_text;
          set @msgTxt = concat(@sqlState, ' ', @sqlCode, ' ', @msgTxt_);
          set sqlStates = concat(sqlStates, ', ', @sqlState);
          set sqlCodes = concat(sqlCodes, ', ', @sqlCode);
          set msgTxts = concat(msgTxts, '\n', @msgTxt);
          set @i = @i + 1;
        end while;
      end if;
    else
      get diagnostics condition 1
        @sqlState_ = returned_sqlstate, @sqlCode_ = mysql_errno, @msgTxt = message_text;
      get diagnostics @errCount = number;
      if @errCount >= 2 then
        get diagnostics condition 2
          @sqlState = returned_sqlstate, @sqlCode = mysql_errno, @msgTxt_ = message_text;
        set @msgTxt = concat(@sqlState, ' ', @sqlCode, ' ', @msgTxt_);
        set sqlStates = case when sqlStates = ''
          then @sqlState else concat(sqlStates, ', ', @sqlState) end;
        set sqlCodes = case when sqlCodes = ''
          then @sqlCode else concat(sqlCodes, ', ', @sqlCode) end;
        set msgTxts = case when msgTxts = ''
          then @msgTxt else concat(msgTxts, '\n', @msgTxt) end;
        set @i = 3;
        while @i <= @errCount do
          get diagnostics condition @i
            @sqlState = returned_sqlstate, @sqlCode = mysql_errno, @msgTxt_ = message_text;
          set @msgTxt = concat(@sqlState, ' ', @sqlCode, ' ', @msgTxt_);
          set sqlStates = concat(sqlStates, ', ', @sqlState);
          set sqlCodes = concat(sqlCodes, ', ', @sqlCode);
          set msgTxts = concat(msgTxts, '\n', @msgTxt);
          set @i = @i + 1;
        end while;
      end if;
      if sqlStates <> '' then
        set @sqlState = concat('sqlstate: ', sqlStates);
        set @sqlCode = concat('sqlcode: ', sqlCodes);
        set @errstr = concat(@msgTxt, ' (', @sqlState, '; ', @sqlCode, ')', '\n\n', msgTxts);
      else
        set @errstr = @msgTxt;
      end if;
      set @errstr = concat('Token_Add_btr ', @sqlState_, ' ', @sqlCode_, ' ', @errstr);
      if @@in_transaction then
        rollback;
      end if;
      resignal set message_text = @errstr;
    end if;
  end if;
end;

XXX: repeat

set cont = true;

if @@in_transaction then
  set lastSqlCode = 20002;
  set lastMsgTxt = 'Cannot run inside an already opened tran';
  leave XXX;
end if;

set @param1Count = (
  select count(*) from Par_Token_Add where $Id = $Pid);

if err then
  set lastSqlCode = 10000;
  set lastMsgTxt = 'Select param1Count failed';
  leave XXX;
end if;

if @param1Count < 1 then
  set lastSqlCode = 20003;
  set lastMsgTxt = 'Empty Par_Token_Add';
  leave XXX;
end if;

set @param2Count = (
  select count(*) from Par_Token_Add_O where $Id = $Pid);

if err then
  set lastSqlCode = 10001;
  set lastMsgTxt = 'Select param2Count failed';
  leave XXX;
end if;

if @param2Count < 1 then
  set lastSqlCode = 20003;
  set lastMsgTxt = 'Empty Par_Token_Add_O';
  leave XXX;
end if;

update Par_Token_Add P1
set Bbr = 1
where $Id = $Pid
  and (
    $ChainId = -2147483648
    or Addr = ''
    )
;

if err then
  set lastSqlCode = 10002;
  set lastMsgTxt = 'Update Par_Token_Add failed';
  leave XXX;
end if;

set @HasBbr = row_count() > 0;
set @HasBb = exists (select 1 from Par_Token_Add P1 where Bbr = 0);

if err then
  set lastSqlCode = 10003;
  set lastMsgTxt = 'Select HasBb failed';
  leave XXX;
end if;

if not (p_Db & 1) and @HasBb then
  set lastSqlCode = 12004;
  set lastMsgTxt = 'Forbidden: instructed to only add BBR tokens; but requested to add BB tokens';
  leave XXX;
end if;

if not (p_Db & 2) and @HasBbr then
  set lastSqlCode = 12005;
  set lastMsgTxt = 'Forbidden: instructed to only add BB tokens; but requested to add BBR tokens';
  leave XXX;
end if;

-- Execute

set transaction isolation level Serializable;

start transaction;

set @Dtm = now(3);

if @HasBbr then

  insert into Token (
      Hash
    , $ChainDes
    , $ChainId
    , ChainId
    , Sym
    , Name
    , Decimals
    , Addr
    , Addr_O
    , Dtm
    , UpdatedDtm
    )
  select
      P1.Hash
    , P1.$ChainDes
    , P1.$ChainId
    , P1.ChainId
    , case when P1.Sym = '' then P2.Sym else P1.Sym end
    , case when P1.Name = '' then P2.Name else P1.Name end
    , P1.Decimals
    , P1.Addr
    , P2.Addr
    , @Dtm
    , @Dtm
  from Par_Token_Add P1
     , Par_Token_Add_O P2
  where P1.$Id = $Pid
    and P1.Bbr
    and P2.$Id = $Pid
    and P1.Hash = P2.Hash
  ;

  if err then
    set lastSqlCode = 10006;
    set lastMsgTxt = 'Insert BBR.Token failed';
    leave XXX;
  end if;

  insert into BBR.TokenProv (TokenHash, ProvHash)
  select
      P1.Hash
    , p_ProvHash
  from Par_Token_Add P1
  where P1.$Id = $Pid
    and P1.Bbr = 1
  ;

  if err then
    set lastSqlCode = 10007;
    set lastMsgTxt = 'Insert BBR.TokenProv failed';
    leave XXX;
  end if;

end if;

if @HasBb then

  insert into BB.Token (
      Hash
    , $ChainDes
    , $ChainId
    , Decimals
    , Dtm
    , UpdatedDtm
    )
  select
      P1.Hash
    , P1.$ChainDes
    , P1.$ChainId
    , P1.Decimals
    , @Dtm
    , @Dtm
  from Par_Token_Add P1
  where P1.$Id = $Pid
    and not P1.Bbr
  ;

  if err then
    set lastSqlCode = 10008;
    set lastMsgTxt = 'Insert BB.Token failed';
    leave XXX;
  end if;

  insert into BB.Addr (
      Hash
    , Des
    , Addr
    , Dtm
  )
  select
      md5_u64(Addr)
    , 'Token'
    , Addr
    , @Dtm
  from Par_Token_Add P1
  where P1.$Id = $Pid
    and not P1.Bbr
  ;

  if err then
    set lastSqlCode = 10009;
    set lastMsgTxt = 'Insert BB.Addr failed';
    leave XXX;
  end if;

  insert into BB.TokenAddr (TokenHash, AddrHash)
  select
      P1.Hash
    , md5_u64(P1.Addr)
  from Par_Token_Add P1
  where P1.$Id = $Pid
    and not P1.Bbr
  ;

  if err then
    set lastSqlCode = 10010;
    set lastMsgTxt = 'Insert BB.TokenAddr failed';
    leave XXX;
  end if;

  insert into BB.Var_Token (Hash, Sym, Name)
  select
      P1.Hash
    , P1.Sym
    , P1.Name
  from Par_Token_Add P1
  where P1.$Id = $Pid
    and not P1.Bbr
    and (P1.Sym <> '' or P1.Name <> '')
  ;

  if err then
    set lastSqlCode = 10011;
    set lastMsgTxt = 'Insert BB.Var_Token failed';
    leave XXX;
  end if;

  insert into BB.Var_Token_O (Hash, Sym, Name)
  select
      P1.Hash
    , P2.Sym
    , P2.Name
  from Par_Token_Add P1
     , Par_Token_Add_O P2
  where P1.$Id = $Pid
    and not P1.Bbr
    and P2.$Id = $Pid
    and P1.Hash = P2.Hash
    and (P2.Sym <> '' or P2.Name <> '')
  ;

  if err then
    set lastSqlCode = 10012;
    set lastMsgTxt = 'Insert BB.Var_Token_O failed';
    leave XXX;
  end if;

  insert into BB.TokenProv (TokenHash, ProvHash)
  select
      P1.Hash
    , p_ProvHash
  from Par_Token_Add P1
  where P1.$Id = $Pid
    and P1.Bbr = 0
  ;

  if err then
    set lastSqlCode = 10013;
    set lastMsgTxt = 'Insert BB.TokenProv failed';
    leave XXX;
  end if;

end if;

until 1 end repeat;

set cont = false;
if @@in_transaction then
  if lastSqlCode = 0 then
    commit;
  else
    rollback;
  end if;
end if;

set gobble = true;

set err = false;
delete from Par_Token_Add where $Id = $Pid;
if not err then
  delete from Param where $Id = $Pid and ParamName = 'Par_Token_Add';
end if;

set err = false;
delete from Par_Token_Add_O where $Id = $Pid;
if not err then
  delete from Param where $Id = $Pid and ParamName = 'Par_Token_Add_O';
end if;

set err = false;
set gobble = false;

set cont = false;
if lastSqlCode <> 0 then
  signal sqlstate '45100'
    set mysql_errno = lastSqlCode, message_text = lastMsgTxt;
end if;

end;