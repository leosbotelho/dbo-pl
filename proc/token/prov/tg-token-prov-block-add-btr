{
  $cont = 1;

  our @Param = our $T1 = qw(Par_Token_Hash);
  our ($P1) = paramAlias @Param;

  '';
}

create or replace procedure TgTokenProvBlock_Add_btr (
  p_Db         tinyint,
  p_ProvHash   bigint unsigned,
  p_BlockDtm   datetime(0),
  $Pid         bigint
)
begin

{Boilerplate}

{valParam @Param}

-- Execute

set transaction isolation level Serializable;

start transaction;

set @Dtm = now(3);

{
my $f = sub {
our $Db = shift;
view q{
set @HasBlockDtmTravelling = exists (
  select 1
  from {$P1}
     , {$Db}.TokenProv Tp
     , {$Db}.ProvBlock Pb
  where P1.$Id = $Pid
    and Tp.Newest = 1
    and Tp.TokenHash = P1.Hash
    and Pb.ProvHash = Tp.ProvHash
    and Pb.BlockDtm > p_BlockDtm
  )
;

{RaiseOnErr 'Select', "$Db HasBlockDtmTravelling"}

if @HasBlockDtmTravelling
then
  {Warn "$Db has BlockDtm travelling"}
end if;

insert into {$Db}.TokenProv (TokenHash, ProvHash, Newest)
select
    Hash
  , p_ProvHash
  , not @HasBlockDtmTravelling
    or not exists (
      select 1
      from {$Db}.TokenProv Tp
         , {$Db}.ProvBlock Pb
      where Tp.Newest = 1
        and Tp.TokenHash = P1.Hash
        and Pb.ProvHash = Tp.ProvHash
        and Pb.BlockDtm > p_BlockDtm
      )
from {$P1}
where P1.$Id = $Pid
;

{RaiseOnErr 'Insert', "$Db.TokenProv"}

update {$Db}.TokenProv Tp
set Newest = 0
where Newest = 1
  and exists (
    select 1
    from {$P1}
       , {$Db}.ProvBlock Pb
    where P1.$Id = $Pid
      and Tp.TokenHash = P1.Hash
      and Pb.ProvHash = Tp.ProvHash
      and Pb.BlockDtm < p_BlockDtm
  )
;

{RaiseOnErr 'Update', "$Db.TokenProv"}
}};

if_p_Db ('BB', $f) . "\n\n" . if_p_Db ('BBR', $f);

}

{$Closing}

{cleanupParam @Param}

{$End_}
